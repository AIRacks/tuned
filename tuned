#!/usr/bin/python
#
# tuned: A simple daemon that performs monitoring and adaptive configuration
#        of devices in the system
#
# Copyright (C) 2008, 2009 Red Hat, Inc.
# Authors: Phil Knirsch
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#

import sys, os.path, getopt, atexit, signal

def usage():
	print "Usage: tuned [-d|--daemon] [-c conffile|--config=conffile]"

def handler(signum, frame):
	sys.exit()

def daemonize():
	try:
		pid = os.fork()
		if pid > 0:
			sys.exit(0)
	except OSError, e:
		sys.exit(1)

	os.chdir("/")
	os.setsid()
	os.umask(0)

	try:
		pid = os.fork()
		if pid > 0:
			sys.exit(0)
	except OSError, e:
		sys.exit(1)

	sys.stdout = sys.stderr = open("/dev/null", 'a+')

if __name__ == "__main__":
	try:
		opts, args = getopt.getopt(sys.argv[1:], "dc:", ["daemon", "config="])
	except getopt.error, e:
		print >>sys.stderr, ("Error parsing command-line arguments: %s", e)
		usage()
	        sys.exit(1)

	if len(args) > 0:
		print >>sys.stderr, ("Too many arguments.")
		usage()
		sys.exit(1)

	daemon = False
	cfgfile = "/etc/tuned.conf"
	for (opt, val) in opts:
		if   opt in ['-d', "--daemon"]:
			daemon = True
		elif opt in ['-c', "--config"]:
			cfgfile = val
		
	if daemon:
		daemonize()

	TUNEDDIR="/usr/share/tuned"
	if not TUNEDDIR in sys.path:
		sys.path.append(TUNEDDIR)

	from tuned import tuned

	atexit.register(tuned.cleanup)
	signal.signal(signal.SIGTERM, handler)

	tuned.init(TUNEDDIR, cfgfile)
	tuned.run()
	tuned.cleanup()
